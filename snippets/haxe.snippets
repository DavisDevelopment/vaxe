# Vim snippets file
# Author    : Justin Donaldson (jdonaldson@gmail.com)
#  Based extensively on a version by Marc Weber (marco-oweber@gmx.de)
# Language  : haxe

#javadoc
snippet doc
	/**
	  ${1}
	 **/
snippet idoc
	/* ${1:what's going on here?} */
snippet com
	// ${1:comment}
snippet switch
	switch (${1}) {
		case ${2}: ${3}
	}
snippet case
	case ${1}: ${2}
snippet try
	try{
		${1}
	}
	catch (e: ${2}) {
	  ${3:// Ignore any errors.}
	}
snippet for
	for (${1:var} in ${2:itr}) {
		${3}
	}
snippet if
	if (${1:condition}) {
		${2://TODO}
	}
snippet ife
	if (${1:condition}) {
		${2://TODO when ${1}}
	}
	else {
		${3://TODO otherwise}
	}
snippet elif
	else if (${1:alt condition}) {
		${2://TODO when ${1}}
	}
snippet class HAXE
	class `expand('%:t:r')` {
		/* Constructor Function */
		public function new(${1}) {
			${2://initialize variables}
		}

	/* === Instance Methods === */
	/* === Instance Fields === */
	}
snippet nclass
	class ${1:ClassName} {
		/* Constructor Function */
		public function new(${2:args}) {
			${3://initialize variables}
		}

	/* === Instance Methods === */
	/* === Instance Fields === */
	}
snippet gclass
	class ${1:ClassName}<${2:T}> {
		/* Constructor Function */
		public function new(${3:args}) {
			${4://initialize variables}
		}

	/* === Instance Methods === */
	/* === Instance Fields === */
	}
snippet main
	/* Main Function */
	static function main() {
		${1:trace("hello world");}
	}
snippet new
	/* Constructor Function */
	public function new(${1:arg}) {
		super($1);
	}
snippet fn func
	/* ${3} */
	function(${1:arg}) {
		${2}
	}
snippet fu function
	/* ${4} */
	function ${1:name}(${2:arg}) {
		${3}
	}
snippet ifu function
	/* ${4} */
	inline function ${1:name}(${2:arg}) {
		${3}
	}
snippet prifu private function
	private function ${1:name}(${2:arg}) {
		${3}
	}
snippet pufu public function
	public function ${1:name}(${2:arg}) {
		${3}
	}
snippet pustafu public static function
	public static function ${1:name}(${2:arg}) {
		${3}
	}
snippet pristafu private static function
	private static function ${1:name}(${2:arg}) {
		${3}
	}
snippet trace
	trace(${1});
snippet desc function
	trace(${1} + " is the value for $1");
snippet cast
	cast(${1:cast_this}, ${2:type})
snippet interface
	interface ${1:name}${2: implements this}${3:, implements other}{
		${4}
	}
snippet #if
	#if js, php, cpp, flash
	${1}
	#end{2}
snippet typedef
	typedef ${1}${2:<T>} = {
		var ${3}:$2;
	}${4}
snippet untyped
	untyped{ ${1} }${2}
snippet enum
	enum ${1:Name} {
		${2:Construct}
	}
